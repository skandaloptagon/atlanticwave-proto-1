***************
*** 63,72 ****
      global User, app, login_manager, shibboleth, unauthorized_handler, page_not_found
  
      app = Flask(__name__, static_url_path='', static_folder='')
  
      #FIXME: This should be more secure.
      app.secret_key = 'ChkaChka.....Boo, Ohhh Yeahh!'
  
      login_manager = LoginManager()
  
      def api_process(self):
--- 63,87 ----
      global User, app, login_manager, shibboleth, unauthorized_handler, page_not_found
  
      app = Flask(__name__, static_url_path='', static_folder='')
+     #sso = SSO(app=app)
  
      #FIXME: This should be more secure.
      app.secret_key = 'ChkaChka.....Boo, Ohhh Yeahh!'
  
+     #: Default attribute map
+     '''
+     SSO_ATTRIBUTE_MAP = {
+         'ADFS_AUTHLEVEL': (False, 'authlevel'),
+         'ADFS_GROUP': (True, 'group'),
+         'ADFS_LOGIN': (True, 'nickname'),
+         'ADFS_ROLE': (False, 'role'),
+         'ADFS_EMAIL': (True, 'email'),
+         'ADFS_IDENTITYCLASS': (False, 'external'),
+         'HTTP_SHIB_AUTHENTICATION_METHOD': (False, 'authmethod'),
+     }
+ 
+     app.config['SSO_ATTRIBUTE_MAP'] = SSO_ATTRIBUTE_MAP
+     '''
      login_manager = LoginManager()
  
      def api_process(self):
***************
*** 86,92 ****
          p = Thread(target=self.api_process)
          p.daemon = True
          p.start()
- 
  
      def _setup_logger(self):
          ''' Internal fucntion for setting up the logger formats. '''
--- 101,108 ----
          p = Thread(target=self.api_process)
          p.daemon = True
          p.start()
+         #app.config['SSO_LOGIN_URL'] = 'http://aw.cloud.rnoc.gatech.edu/secure/login2.cgi'
+         pass
  
      def _setup_logger(self):
          ''' Internal fucntion for setting up the logger formats. '''
***************
*** 103,113 ****
          self.logger.addHandler(console)
          self.logger.addHandler(logfile) 
  
- 
      class User(flask_login.UserMixin):
          pass
  
- 
      # This builds a shibboleth session
      @staticmethod
      @app.route('/build_session')
--- 119,127 ----
          self.logger.addHandler(console)
          self.logger.addHandler(logfile) 
  
      class User(flask_login.UserMixin):
          pass
  
      # This builds a shibboleth session
      @staticmethod
      @app.route('/build_session')
***************
*** 134,140 ****
          flask_login.login_user(user)
          return flask.redirect(flask.url_for('home'))
  
- 
      # This maintains the state of a logged in user.
      @staticmethod
      @login_manager.user_loader
--- 148,153 ----
          flask_login.login_user(user)
          return flask.redirect(flask.url_for('home'))
  
      # This maintains the state of a logged in user.
      @staticmethod
      @login_manager.user_loader
***************
*** 143,149 ****
          user.id = email
          return user
  
- 
      # Preset the login form to the user and request to log user in
      #@staticmethod
      @app.route('/', methods=['GET'])
--- 156,161 ----
          user.id = email
          return user
  
      # Preset the login form to the user and request to log user in
      #@staticmethod
      @app.route('/', methods=['GET'])
***************
*** 151,156 ****
          if flask_login.current_user.get_id() == None:
  
              return flask.render_template('index.html', current_user="Sign in", logged_out=True, home=True, shibboleth=shibboleth)
          else: 
              # Get the Topo for dynamic list gen
              G = TopologyManager.instance().get_topology()            
--- 163,173 ----
          if flask_login.current_user.get_id() == None:
  
              return flask.render_template('index.html', current_user="Sign in", logged_out=True, home=True, shibboleth=shibboleth)
+             '''
+             if shibboleth:
+                 return app.send_static_file('static/index_shibboleth.html')
+             return app.send_static_file('static/index.html')
+             '''
          else: 
              # Get the Topo for dynamic list gen
              G = TopologyManager.instance().get_topology()            
***************
*** 311,316 ****
              # Just making sure the datetimes are okay
              starttime = datetime.strptime(str(pd(request.form['startdate'] + ' ' + request.form['starttime'])), '%Y-%m-%d %H:%M:%S')
              endtime = datetime.strptime(str(pd(request.form['enddate'] + ' ' + request.form['endtime'])), '%Y-%m-%d %H:%M:%S')
      
              # The Object to pass into L2TunnelPolicy
              data = {"l2tunnel":{"starttime":str(starttime.strftime(rfc3339format)),
--- 328,334 ----
              # Just making sure the datetimes are okay
              starttime = datetime.strptime(str(pd(request.form['startdate'] + ' ' + request.form['starttime'])), '%Y-%m-%d %H:%M:%S')
              endtime = datetime.strptime(str(pd(request.form['enddate'] + ' ' + request.form['endtime'])), '%Y-%m-%d %H:%M:%S')
+ 
      
              # The Object to pass into L2TunnelPolicy
              data = {"l2tunnel":{"starttime":str(starttime.strftime(rfc3339format)),
***************
*** 337,343 ****
          print rule_hash
          return flask.redirect('/rule/' + str(rule_hash))
  
- 
      # Get information about a specific rule IDed by hash.
      @staticmethod
      @app.route('/rule/<rule_hash>',methods=['GET','POST'])
--- 355,360 ----
          print rule_hash
          return flask.redirect('/rule/' + str(rule_hash))
  
      # Get information about a specific rule IDed by hash.
      @staticmethod
      @app.route('/rule/<rule_hash>',methods=['GET','POST'])
***************
*** 364,370 ****
                  return "Invalid HTTP request for rule manager"
          return page_not_found(e)
  
- 
      # Get a list of rules that match certain filters or a query.
      @staticmethod
      @app.route('/rule/all/', methods=['GET','POST'])
--- 381,386 ----
                  return "Invalid HTTP request for rule manager"
          return page_not_found(e)
  
      # Get a list of rules that match certain filters or a query.
      @staticmethod
      @app.route('/rule/all/', methods=['GET','POST'])
***************
*** 378,384 ****
                  RuleManager.instance().remove_all_rules(flask_login.current_user.id)
              return flask.render_template('rules.html', rules=RuleManager.instance().get_rules())
          return ""
- 
   
      # Get a list of rules that match certain filters or a query.
      @staticmethod
--- 394,399 ----
                  RuleManager.instance().remove_all_rules(flask_login.current_user.id)
              return flask.render_template('rules.html', rules=RuleManager.instance().get_rules())
          return ""
   
      # Get a list of rules that match certain filters or a query.
      @staticmethod
